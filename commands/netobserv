#!/usr/bin/env bash
source "./scripts/functions.sh"
source "./scripts/help.sh"
source "./scripts/dependencies_check.sh"

set +u

# e2e skips inputs
if [ -z "${isE2E+x}" ]; then isE2E=false; fi
# keep capture state
if [ -z "${captureStarted+x}" ]; then captureStarted=false; fi
# prompt copy by default
if [ -z "${copy+x}" ]; then copy="prompt"; fi
# run foreground by default
if [ -z "${runBackground+x}" ]; then runBackground="false"; fi
# output as yaml only
if [ -z "${outputYAML+x}" ]; then outputYAML="false"; fi
# formated date for file names
if [ -z "${dateName+x}" ]; then dateName="$(date +"%Y_%m_%d_%I_%M")"; fi

# options such as filters, background etc
options=""

# namespace for this run
namespace="netobserv-cli"

if [ -n "$NETOBSERV_NAMESPACE" ]; then
  echo "using custom namespace $NETOBSERV_NAMESPACE"
  namespace="$NETOBSERV_NAMESPACE"
fi

# CLI image to use
img="quay.io/netobserv/network-observability-cli:main"

if [ -n "$NETOBSERV_COLLECTOR_IMAGE" ]; then
  echo "using custom collector image $NETOBSERV_COLLECTOR_IMAGE"
  img="$NETOBSERV_COLLECTOR_IMAGE"
fi

# version to display
version="0.0.1"

# dependencies
supported_archs=""
required_yq_version="v0.0.0"
required_bash_version="v0.0.0"

# command to run
command=""

# log level (default: info)
logLevel="info"

# max time (default: 5min)
maxTime="5m"

# max bytes (default: 50MB)
maxBytes=50000000

# skip dependencies check for help or version
if [[ ! "$*" =~ ^(.*)help|version(.*) ]]; then
  check_dependencies "$required_yq_version" "$supported_archs" "$required_bash_version"
fi

# detect output yaml option before running the script to avoid any apply
if [[ "$*" =~ ^(.*)yaml=true|(yaml$)|(yaml )(.*) ]]; then
  echo "Output YAMLs without applying..."
  outputYAML="true"
fi

case "$1" in
*help)
  help
  exit 0
  ;;
*version)
  version "$version"
  exit 0
  ;;
*flows)
  case "$2" in
  *help)
    flows_usage
    exit 0
    ;;
  *)
    shift # remove first argument
    options=( "$@" )
    # run flows command
    command="flows"
    ;;
  esac
  ;;
*packets)
  case "$2" in
  *help)
    packets_usage
    exit 0
    ;;
  *)
    shift # remove first argument
    options=( "$@" )
    # run packets command
    command="packets"
    ;;
  esac
  ;;
*metrics)
  case "$2" in
  *help)
    metrics_usage
    exit 0
    ;;
  *)
    shift # remove first argument
    options=( "$@" )
    # run metrics command
    command="metrics"
    ;;
  esac
  ;;
*follow)
  case "$2" in
  *help)
    follow_usage
    exit 0
    ;;
  *)
    # run follow command
    follow
    exit 0
    ;;
  esac
  ;;
*stop)
  case "$2" in
  *help)
    stop_usage
    exit 0
    ;;
  *)
    # run deleteDaemonset command
    deleteDaemonset
    exit 0
    ;;
  esac
  ;;
*copy)
  case "$2" in
  *help)
    copy_usage
    exit 0
    ;;
  *)
    # run copy output command
    copyOutput
    exit 0
    ;;
  esac
  ;;
*cleanup)
  case "$2" in
  *help)
    cleanup_usage
    exit 0
    ;;
  *)
    # run cleanup command
    cleanup
    exit 0
    ;;
  esac
  ;;
*)
  echo "Unknown command $1. Use 'netobserv help' to display options"
  exit 1
  ;;
esac

trap cleanup EXIT

setup

if [[ "$command" == "flows" || "$command" == "packets" ]]; then
  # convert options to string
  optionStr="${options//--/}"
  optionStr="${optionStr// /|}"

  # prepare commands & args
  runCommand="sleep infinity"
  execCommand="/network-observability-cli get-$command ${optionStr:+"--options" "${optionStr}"} --loglevel $logLevel --maxtime $maxTime --maxbytes $maxBytes"
  if [[ "$runBackground" == "true" || "$outputYAML" == "true" ]]; then
    runCommand="bash -c \"$execCommand && $runCommand\""
    execCommand=""
  fi
  cmd="${K8S_CLI_BIN} run -n $namespace collector \\
  --image=$img --image-pull-policy='Always' --restart='Never' \\
  --overrides='{\"spec\": {\"serviceAccount\": \"netobserv-cli\"}}' \\
  --command -- $runCommand"

  if [[ "$outputYAML" == "true" ]]; then
    echo "Check the generated YAML file in output folder."
    echo
    echo "You can create $command agents by executing:"
    echo " ${K8S_CLI_BIN} apply -f ./output/${command}_capture_${dateName}.yml"
    echo
    echo "Then create the collector using:"
    echo -e " $cmd"
    echo
    echo "And follow its progression with:"
    echo " ${K8S_CLI_BIN} logs collector -n $namespace -f"
    echo
    exit 0
  fi

  echo "Running network-observability-cli get-$cmd... "
  eval "$cmd"

  ${K8S_CLI_BIN} wait \
    --timeout 60s \
    -n $namespace \
    --for=condition=Ready pod/collector || exit 1

  captureStarted=true

  if [ -n "${execCommand}" ]; then
    ${K8S_CLI_BIN} exec -i --tty \
      -n $namespace \
      collector \
      -- $execCommand
  else
    echo "Background capture started. Use:"
    echo " - '${K8S_CLI_BIN} netobserv follow' to see the capture progress"
    echo " - '${K8S_CLI_BIN} netobserv copy' to copy the generated files locally"
    echo " - '${K8S_CLI_BIN} netobserv cleanup' to remove the netobserv components"
  fi
elif [ "$command" = "metrics" ]; then
  if [[ "$outputYAML" == "true" ]]; then
    echo "Check the generated YAML file in output folder."
    echo
    echo "You can create metrics agents by executing:"
    echo " ${K8S_CLI_BIN} apply -f ./output/${command}_capture_${dateName}.yml"
    echo 
    echo "Then open your OCP Console and search for netobserv-cli dashboard"
    echo
    exit 0
  fi
  runBackground="true"
  echo "Metrics capture started."
  consoleURL="$(oc whoami --show-console)"
  echo "Open ${consoleURL}/monitoring/dashboards/netobserv-cli to see generated metrics."
  echo "Use 'oc netobserv stop' to stop the collection and 'oc netobserv cleanup' to remove everything."
else
  echo "Unexpected exception occured on $command"
  exit 1
fi
